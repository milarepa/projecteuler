#! /usr/bin/python
"""
Euler Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Began with the recursive version, taking O(fib(n)) time - which will not
work when using a number bigger than about 30 - f(30) takes about a billion calculations.
Caching the results helps, but we blow the stack trying 10,000 as this is still a O(n**2) algorithm. ...we need to go iterive.
"""

def fib(n):

  assert n >= 0
  i, fib_i, fib_minus_one = 0,0,1

  while i < n:
    i += 1
    fib_i, fib_minus_one = fib_minus_one + fib_i, fib_i

  return fib_i


def gather():

  l = []
  num = 0
  i = 0
  total = 0

  while total <= 4000000:
    num = fib(i)
    if num % 2 == 0:
      l.append(num)
    i += 1
    total = sum(l)

  return str(total) + " at number : " + str(i)


